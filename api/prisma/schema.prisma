// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  name          String
  hasCompletedOnboarding Boolean @default(false)
  isAdmin       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  projectsOwned Project[] @relation("ProjectOwner")
  projectAccess ProjectAccess[]

  @@map("users")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  ownerId     String
  subdomain   String?  @unique // e.g., "my-portfolio" for my-portfolio.foligo.tech
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Site Configuration
  siteConfig SiteConfig?

  // Relationships
  owner   User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members ProjectAccess[]
  content Content[]
  assets  Asset[]

  @@map("projects")
}

model ProjectAccess {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  role      Role     @default(VIEWER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_access")
}

model Content {
  id          String      @id @default(uuid())
  projectId   String
  type        ContentType
  contentType String      @default("BLOG") // PROJECT, BLOG, EXPERIENCE
  title       String
  slug        String?     @unique
  excerpt     String?
  content     String      // Markdown content
  metadata    Json?       // Additional metadata (tags, categories, etc.)
  order       Int         @default(0)
  isPublished Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  aiAnalysis AIAnalysis?

  @@map("content")
}

model Asset {
  id        String   @id @default(uuid())
  projectId String
  url       String
  fileType  String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("assets")
}

model SiteConfig {
  id        String   @id @default(uuid())
  projectId String   @unique
  siteName  String?
  siteDescription String?
  
  // Layout Configuration
  layoutConfig Json // Store layout preferences
  
  // Color Scheme
  primaryColor   String @default("#3B82F6")
  secondaryColor String @default("#1E40AF")
  accentColor    String @default("#F59E0B")
  backgroundColor String @default("#FFFFFF")
  textColor       String @default("#1F2937")
  
  // Page Layouts
  indexLayout    String @default("grid") // grid, list, masonry
  archiveLayout  String @default("list") // grid, list, masonry
  singleLayout   String @default("standard") // standard, wide, minimal
  
  // SEO
  metaTitle       String?
  metaDescription String?
  favicon         String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("site_config")
}

model AIAnalysis {
  id        String   @id @default(uuid())
  contentId String   @unique
  tags      String[]
  summary   String?
  altText   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@map("ai_analysis")
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}

enum ContentType {
  PROJECT
  BLOG
  EXPERIENCE
}
